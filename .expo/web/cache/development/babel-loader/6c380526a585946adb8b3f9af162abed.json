{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\n\nvar isOrientationPortrait = function isOrientationPortrait(_ref) {\n  var width = _ref.width,\n      height = _ref.height;\n  return height >= width;\n};\n\nvar isOrientationLandscape = function isOrientationLandscape(_ref2) {\n  var width = _ref2.width,\n      height = _ref2.height;\n  return width >= height;\n};\n\nexport function useDeviceOrientation() {\n  var screen = Dimensions.get('screen');\n  var initialState = {\n    portrait: isOrientationPortrait(screen),\n    landscape: isOrientationLandscape(screen)\n  };\n\n  var _useState = useState(initialState),\n      _useState2 = _slicedToArray(_useState, 2),\n      orientation = _useState2[0],\n      setOrientation = _useState2[1];\n\n  useEffect(function () {\n    var onChange = function onChange(_ref3) {\n      var screen = _ref3.screen;\n      setOrientation({\n        portrait: isOrientationPortrait(screen),\n        landscape: isOrientationLandscape(screen)\n      });\n    };\n\n    var subscription = Dimensions.addEventListener('change', onChange);\n    return function () {\n      if (typeof (subscription === null || subscription === void 0 ? void 0 : subscription.remove) === 'function') {\n        subscription.remove();\n      } else {\n        Dimensions.removeEventListener('change', onChange);\n      }\n    };\n  }, []);\n  return orientation.portrait === true ? 'PORTRAIT' : 'LANDSCAPE';\n}","map":{"version":3,"sources":["useDeviceOrientation.ts"],"names":["isOrientationPortrait","height","isOrientationLandscape","width","screen","Dimensions","initialState","portrait","landscape","useState","useEffect","onChange","setOrientation","subscription","orientation"],"mappings":";AACA,SAAA,SAAA,EAAA,QAAA,QAAA,OAAA;;;AAGA,IAAMA,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAA,IAAA,EAAA;EAAA,IAAC,KAAD,GAAA,IAAA,CAAC,KAAD;EAAA,IAAUC,MAAV,GAAA,IAAA,CAAUA,MAAV;EAAA,OAC5BA,MAAM,IADsB,KAAA;AAA9B,CAAA;;AAEA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAA,KAAA,EAAA;EAAA,IAAC,KAAD,GAAA,KAAA,CAAC,KAAD;EAAA,IAAUD,MAAV,GAAA,KAAA,CAAUA,MAAV;EAAA,OAC7BE,KAAK,IADwB,MAAA;AAA/B,CAAA;;AAGA,OAAO,SAAA,oBAAA,GAAgC;EACrC,IAAMC,MAAM,GAAGC,UAAU,CAAVA,GAAAA,CAAf,QAAeA,CAAf;EACA,IAAMC,YAAY,GAAG;IACnBC,QAAQ,EAAEP,qBAAqB,CADZ,MACY,CADZ;IAEnBQ,SAAS,EAAEN,sBAAsB,CAAA,MAAA;EAFd,CAArB;;EAKA,gBAAsCO,QAAQ,CAA9C,YAA8C,CAA9C;EAAA;EAAA,IAAM,WAAN;EAAA,IAAM,cAAN;;EAEAC,SAAS,CAAC,YAAM;IACd,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAA,KAAA,EAAwC;MAAvC,IAAEP,MAAF,GAAuC,KAAvC,CAAEA,MAAF;MAChBQ,cAAc,CAAC;QACbL,QAAQ,EAAEP,qBAAqB,CADlB,MACkB,CADlB;QAEbQ,SAAS,EAAEN,sBAAsB,CAAA,MAAA;MAFpB,CAAD,CAAdU;IADF,CAAA;;IAOA,IAAMC,YAAY,GAAGR,UAAU,CAAVA,gBAAAA,CAAAA,QAAAA,EAArB,QAAqBA,CAArB;IAEA,OAAO,YAAM;MACX,IAAI,QAAOQ,YAAP,KAAA,IAAOA,IAAAA,YAAP,KAAA,KAAA,CAAOA,GAAP,KAAA,CAAOA,GAAAA,YAAY,CAAnB,MAAA,MAAJ,UAAA,EAAgD;QAC9CA,YAAY,CAAZA,MAAAA;MADF,CAAA,MAEO;QAELR,UAAU,CAAVA,mBAAAA,CAAAA,QAAAA,EAAAA,QAAAA;MACD;IANH,CAAA;EAVO,CAAA,EAATK,EAAS,CAATA;EAoBA,OAAOI,WAAW,CAAXA,QAAAA,KAAAA,IAAAA,GAAAA,UAAAA,GAAP,WAAA;AACD","sourcesContent":["/* eslint-disable no-shadow */\nimport { useEffect, useState } from 'react';\nimport { Dimensions, ScaledSize } from 'react-native';\n\nconst isOrientationPortrait = ({ width, height }: ScaledSize) =>\n  height >= width;\nconst isOrientationLandscape = ({ width, height }: ScaledSize) =>\n  width >= height;\n\nexport function useDeviceOrientation() {\n  const screen = Dimensions.get('screen');\n  const initialState = {\n    portrait: isOrientationPortrait(screen),\n    landscape: isOrientationLandscape(screen),\n  };\n\n  const [orientation, setOrientation] = useState(initialState);\n\n  useEffect(() => {\n    const onChange = ({ screen }: { screen: ScaledSize }) => {\n      setOrientation({\n        portrait: isOrientationPortrait(screen),\n        landscape: isOrientationLandscape(screen),\n      });\n    };\n\n    const subscription = Dimensions.addEventListener('change', onChange);\n\n    return () => {\n      if (typeof subscription?.remove === 'function') {\n        subscription.remove();\n      } else {\n        // React Native < 0.65\n        Dimensions.removeEventListener('change', onChange);\n      }\n    };\n  }, []);\n\n  return orientation.portrait === true ? 'PORTRAIT' : 'LANDSCAPE';\n}\n"]},"metadata":{},"sourceType":"module"}