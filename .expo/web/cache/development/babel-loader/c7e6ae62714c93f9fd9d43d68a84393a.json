{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nimport React, { useEffect, useState } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport { styles } from \"./styles\";\n\nvar ic_close = require(\"../../assets/close.png\");\n\nvar defaultProps = {\n  style: {},\n  value: '',\n  showIcon: true,\n  currency: false,\n  numeric: false\n};\n\nvar TextInputComponent = function TextInputComponent(props) {\n  var fontFamily = props.fontFamily,\n      style = props.style,\n      value = props.value,\n      _props$placeholderTex = props.placeholderTextColor,\n      placeholderTextColor = _props$placeholderTex === void 0 ? '#000' : _props$placeholderTex,\n      _props$placeholder = props.placeholder,\n      placeholder = _props$placeholder === void 0 ? '' : _props$placeholder,\n      showIcon = props.showIcon,\n      inputStyle = props.inputStyle,\n      iconStyle = props.iconStyle,\n      _props$onChangeText = props.onChangeText,\n      onChangeText = _props$onChangeText === void 0 ? function (_value) {} : _props$onChangeText,\n      renderLeftIcon = props.renderLeftIcon,\n      renderRightIcon = props.renderRightIcon;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      text = _useState2[0],\n      setText = _useState2[1];\n\n  useEffect(function () {\n    if (value) {\n      setText(value);\n    }\n  }, [value]);\n\n  var onChange = function onChange(text) {\n    setText(text);\n    onChangeText(text);\n  };\n\n  var _renderRightIcon = function _renderRightIcon() {\n    if (showIcon) {\n      if (renderRightIcon) {\n        return renderRightIcon();\n      }\n\n      if (text.length > 0) {\n        return React.createElement(TouchableOpacity, {\n          onPress: function onPress() {\n            return onChange('');\n          }\n        }, React.createElement(Image, {\n          source: ic_close,\n          style: [styles.icon, iconStyle]\n        }));\n      }\n\n      return null;\n    }\n\n    return null;\n  };\n\n  var font = function font() {\n    if (fontFamily) {\n      return {\n        fontFamily: fontFamily\n      };\n    } else {\n      return {};\n    }\n  };\n\n  return React.createElement(TouchableWithoutFeedback, null, React.createElement(View, {\n    style: [style]\n  }, React.createElement(View, {\n    style: styles.textInput\n  }, renderLeftIcon === null || renderLeftIcon === void 0 ? void 0 : renderLeftIcon(), React.createElement(TextInput, _extends({}, props, {\n    style: [styles.input, inputStyle, font()],\n    value: text,\n    placeholder: placeholder,\n    placeholderTextColor: placeholderTextColor,\n    onChangeText: onChange\n  })), _renderRightIcon())));\n};\n\nTextInputComponent.defaultProps = defaultProps;\nexport default TextInputComponent;","map":{"version":3,"sources":["index.tsx"],"names":["ic_close","require","defaultProps","style","value","showIcon","currency","numeric","TextInputComponent","props","placeholderTextColor","placeholder","onChangeText","_value","renderRightIcon","useState","useEffect","setText","onChange","text","_renderRightIcon","styles","font","fontFamily","textInput","renderLeftIcon"],"mappings":"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","sourcesContent":["/* eslint-disable no-shadow */\nimport React, { useEffect, useState } from 'react';\nimport {\n  Image,\n  TextInput,\n  TouchableOpacity,\n  View,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport type { CTextInput } from './model';\nimport { styles } from './styles';\n\nconst ic_close = require('../../assets/close.png');\n\nconst defaultProps = {\n  style: {},\n  value: '',\n  showIcon: true,\n  currency: false,\n  numeric: false,\n};\n\nconst TextInputComponent: CTextInput = (props) => {\n  const {\n    fontFamily,\n    style,\n    value,\n    placeholderTextColor = '#000',\n    placeholder = '',\n    showIcon,\n    inputStyle,\n    iconStyle,\n    onChangeText = (_value: string) => {},\n    renderLeftIcon,\n    renderRightIcon,\n  } = props;\n\n  const [text, setText] = useState<string>('');\n\n  useEffect(() => {\n    if (value) {\n      setText(value);\n    }\n  }, [value]);\n\n  const onChange = (text: string) => {\n    setText(text);\n    onChangeText(text);\n  };\n\n  const _renderRightIcon = () => {\n    if (showIcon) {\n      if (renderRightIcon) {\n        return renderRightIcon();\n      }\n      if (text.length > 0) {\n        return (\n          <TouchableOpacity onPress={() => onChange('')}>\n            <Image source={ic_close} style={[styles.icon, iconStyle]} />\n          </TouchableOpacity>\n        );\n      }\n      return null;\n    }\n    return null;\n  };\n\n  const font = () => {\n    if (fontFamily) {\n      return {\n        fontFamily: fontFamily,\n      };\n    } else {\n      return {};\n    }\n  };\n\n  return (\n    <TouchableWithoutFeedback>\n      <View style={[style]}>\n        <View style={styles.textInput}>\n          {renderLeftIcon?.()}\n          <TextInput\n            {...props}\n            style={[styles.input, inputStyle, font()]}\n            value={text}\n            placeholder={placeholder}\n            placeholderTextColor={placeholderTextColor}\n            onChangeText={onChange}\n          />\n          {_renderRightIcon()}\n        </View>\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nTextInputComponent.defaultProps = defaultProps;\n\nexport default TextInputComponent;\n"]},"metadata":{},"sourceType":"module"}